package main

import (
	"fmt"

	"github.com/tfriedel6/canvas/sdlcanvas"
	"github.com/veandco/go-sdl2/sdl"
)

func addEvent(wnd *sdlcanvas.Window) *sdlcanvas.Window {
	wnd.Event = func(event sdl.Event) {
		switch event := event.(type) {
		case *sdl.QuitEvent:
			if online {
			}
			running = false
			return
			//os.Exit(1)
		case *sdl.DisplayEvent:
		case *sdl.MouseMotionEvent:
			mouseMoveUpdate(float64(event.X), float64(event.Y))
		case *sdl.MouseWheelEvent:
			// mouseWheelEvent(int(event.X), int(event.Y))
		case *sdl.MouseButtonEvent:
			if event.State == sdl.PRESSED {
				mouseDownUpdate(int(event.Button), int(event.X), int(event.Y))
			} else if event.State == sdl.RELEASED {
				mouseUpUpdate(int(event.Button))
			}
		}
	}
	return wnd
}

func mouseMoveUpdate(x, y float64) {
	souris.X = int(x)
	souris.Y = int(y)
}

func mouseDownUpdate(button, x, y int) {
	if x > osc.Amplitude.PositionUp.X && x < osc.Amplitude.PositionUp.X+osc.Amplitude.PositionUp.Width && y > osc.Amplitude.PositionUp.Y && y < osc.Amplitude.PositionUp.Y+osc.Amplitude.PositionUp.Height {
		osc.Amplitude.Value += 0.1
		fmt.Println("osc.Amplitude.Value  up : ", osc.Amplitude.Value)
	}
	if x > osc.Amplitude.PositionDown.X && x < osc.Amplitude.PositionDown.X+osc.Amplitude.PositionDown.Width && y > osc.Amplitude.PositionDown.Y && y < osc.Amplitude.PositionDown.Y+osc.Amplitude.PositionDown.Height {
		osc.Amplitude.Value += 0.1
		fmt.Println("osc.Amplitude.Value  down : ", osc.Amplitude.Value)
	}
	if x > osc.Frequency.PositionUp.X && x < osc.Frequency.PositionUp.X+osc.Frequency.PositionUp.Width && y > osc.Frequency.PositionUp.Y && y < osc.Frequency.PositionUp.Y+osc.Frequency.PositionUp.Height {
		osc.Frequency.Value += 0.1
		fmt.Println("osc.Frequency.Value  up : ", osc.Amplitude.Value)
	}
	if x > osc.Frequency.PositionDown.X && x < osc.Frequency.PositionDown.X+osc.Frequency.PositionDown.Width && y > osc.Frequency.PositionDown.Y && y < osc.Frequency.PositionDown.Y+osc.Frequency.PositionDown.Height {
		osc.Frequency.Value += 0.1
		fmt.Println("osc.Frequency.Value  down : ", osc.Amplitude.Value)
	}
	if x > osc.Phase.PositionUp.X && x < osc.Phase.PositionUp.X+osc.Phase.PositionUp.Width && y > osc.Phase.PositionUp.Y && y < osc.Phase.PositionUp.Y+osc.Phase.PositionUp.Height {
		osc.Phase.Value += 0.1
		fmt.Println("osc.Phase.Value  up : ", osc.Amplitude.Value)
	}
	if x > osc.Phase.PositionDown.X && x < osc.Phase.PositionDown.X+osc.Phase.PositionDown.Width && y > osc.Phase.PositionDown.Y && y < osc.Phase.PositionDown.Y+osc.Phase.PositionDown.Height {
		osc.Phase.Value += 0.1
		fmt.Println("osc.Phase.Value  down : ", osc.Amplitude.Value)
	}
}

/*
	case *sdl.KeyboardEvent:
		scancode := event.Keysym.Scancode
		keycode := event.Keysym.Sym
		name := sdl.GetKeyName(keycode)
		//fmt.Println("scancode: ", scancode, "keycode: ", keycode, "name: ", name)
		// scancode F12 = 69
		if event.Type == sdl.KEYDOWN && scancode == 69 {
			letDisconnect()
			os.Exit(1)
		}
		if event.Type == sdl.KEYDOWN {
			// fmt.Println("keydown: ", scancode, keycode, name)
			keyDownUpdate(name)
		} else if event.Type == sdl.KEYUP {
			// fmt.Println("keyup: ", scancode, keycode, name)
			keyUpUpdate(name)
		}
	case *sdl.TextInputEvent:
		textInput := event.GetText()
		if menuConnexion {
			keyDownMenuConnexion(textInput)
		} else if menuPrincipal {
			keyDownContact(textInput)
		}
		// fmt.Println("text input: ", textInput) // event.GetText())
*/
